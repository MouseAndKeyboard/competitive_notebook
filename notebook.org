#+TITLE: Notebook

* Meta
This section is dedicated to information and scripts
directly related to the notebook itself.

** Makefile
#+BEGIN_SRC makefile :tangle Makefile

test: rational_test point_test
	./rational_test
	./point_test

rational_test: testrational.cpp rational.h
	g++ -o rational_test testrational.cpp rational.h

point_test: point_test.cpp point.h
	g++ -o point_test point_test.cpp point.h

clean:
	rm -f notebook.html
	rm -f rational_test
	rm -f point_test

# Need to re-tangle the org-file after running this
delete:
	rm -f *.cpp
	rm -f *.h
	rm -f Makefile

empty: clean delete

#+END_SRC

* I/O

You can still use cin/cout and achieve the same speed as scanf/printf by including the following two lines in your main() function:
#+BEGIN_SRC C++
ios_base::sync_with_stdio(false);
#+END_SRC

tie() is a method which simply guarantees the flushing of std::cout before std::cin accepts an input. This is useful for interactive console programs which require the console to be updated constantly but also slows down the program for large I/O.
#+BEGIN_SRC C++
cin.tie(NULL);
#+END_SRC

** Templates

*** Super fast number input
#+BEGIN_SRC C++
void fastscan(int &number)
{
    //variable to indicate sign of input number
    bool negative = false;
    register int c;

    number = 0;

    // extract current character from buffer
    c = getchar();
    if (c=='-')
    {
        // number is negative
        negative = true;

        // extract the next character from the buffer
        c = getchar();
    }

    // Keep on extracting characters if they are integers
    // i.e ASCII Value lies from '0'(48) to '9' (57)
    for (; (c>47 && c<58); c=getchar())
        number = number *10 + c - 48;

    // if scanned input has a negative sign, negate the
    // value of the input number
    if (negative)
        number *= -1;
}
#+END_SRC

*** Main template
#+BEGIN_SRC C++
#include <bits/stdc++.h>
using namespace std;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    return 0;
}
#+END_SRC

* Computational Geometry
** Rational Number Class
*** Simplify

After simplification, if the number is negative, the numerator
will be the negative value.

#+NAME: rational-simp
#+BEGIN_SRC C++
#include <algorithm>

template<typename T, typename U>
void Rational<T,U>::simplify(void) {
    // Fixes negative denominators.
    if (denom < 0)
    {
        numer *= -1;
        denom *= -1;
    }

    // Simplifies Rational Numbers.
    int den = std::__gcd(numer, denom);

    numer /= den;
    denom /= den;
}
#+END_SRC

#+RESULTS: rational-simp

**** Test
#+NAME: test-rational-simp
#+BEGIN_SRC C++
Rational<int,int> simp1 = Rational<int,int>(10, 5);
simp1.simplify();
assert(simp1.numer == 2 && simp1.denom == 1);
Rational<int, int> simp2 = Rational<int, int>(5, 10);
simp2.simplify();
assert(simp2.numer == 1 && simp2.denom == 2);
Rational<int, int> simp3 = Rational<int, int>(7, 3);
simp3.simplify();
assert(simp3.numer == 7 && simp3.denom == 3);
Rational<int,int> simp4 = Rational<int,int>(4,-2);
simp4.simplify();
assert(simp4.numer == -2 && simp4.denom == 1);
#+END_SRC

*** Rescale denominator
Set the denominator to a new value, scale the numerator appropriately.

*WARNING:* newval should either or divide or be divided by the denominator
otherwise the numerator will be incorrectly scaled.

#+NAME: rational-rescale
#+BEGIN_SRC C++
template<typename T, typename U>
void Rational<T,U>::rescale_denom(U newval)
{
    U scalefactor;
    if (newval >= denom)
    {
        scalefactor = newval / denom;
        numer *= scalefactor;
    }
    else
    {
        scalefactor = denom / newval;
        numer /= scalefactor;
    }
    denom = newval;
    return;
}
#+END_SRC

**** Tests
#+NAME: test-rational-rescale
#+BEGIN_SRC C++
Rational<int,int> rescale_a = Rational<int,int>(4,7);
rescale_a.rescale_denom(21);
assert(rescale_a.denom == 21 && rescale_a.numer == 12);
Rational<int,int> rescale_b = Rational<int,int>(6,15);
rescale_b.rescale_denom(5);
assert(rescale_b.denom == 5 && rescale_b.numer == 2);
#+END_SRC

*** Rational add
Adds two fractions together, denominator will be the product of the
denominators of the inputs.

#+NAME: rational-add
#+BEGIN_SRC C++
template<typename T, typename U>
Rational<T,U> Rational<T,U>::operator+(Rational<T,U> const &obj)
{
    if (denom == obj.denom)
    {
        return Rational(numer + obj.numer, denom);
    }
    else {
        return Rational(numer * obj.denom + denom * obj.numer,
                        denom * obj.denom);
    }
}
#+END_SRC

**** Tests
#+NAME: test-rational-add
#+BEGIN_SRC C++
Rational<int,int> rat_add_a = Rational<int,int>(1,4);
Rational<int,int> rat_add_b = Rational<int,int>(2,4);
Rational<int,int> rat_add_r1 = rat_add_a + rat_add_b;
assert(rat_add_r1.numer == 3 && rat_add_r1.denom == 4);
Rational<int,int> rat_add_c = Rational<int,int>(5,7);
Rational<int,int> rat_add_r2 = rat_add_a + rat_add_c;
rat_add_r2.simplify();
assert(rat_add_r2.numer == 27 && rat_add_r2.denom == 28);
#+END_SRC

*** Rational subtraction
Subtracts two fractions;
\( \frac{a}{b} - \frac{c}{d} = \frac{a d - c b}{b d}\)

#+NAME: rational-sub
#+BEGIN_SRC C++
template<typename T, typename U>
Rational<T,U> Rational<T,U>::operator-(Rational<T,U> const &obj)
{
    if (denom == obj.denom)
    {
        return Rational(numer - obj.numer, denom);
    }
    else {
        return Rational(numer * obj.denom - denom * obj.numer,
                        denom * obj.denom);
    }
}
#+END_SRC

**** Tests
#+NAME: test-rational-sub
#+BEGIN_SRC C++
Rational<int,int> rat_sub_a = Rational<int,int>(1,4);
Rational<int,int> rat_sub_b = Rational<int,int>(2,4);
Rational<int,int> rat_sub_r1 = rat_sub_b - rat_sub_a;
assert(rat_sub_r1.numer == 1 && rat_sub_r1.denom == 4);
Rational<int,int> rat_sub_c = Rational<int,int>(5,7);
Rational<int,int> rat_sub_r2 = rat_sub_a - rat_sub_c;
rat_sub_r2.simplify();
assert(rat_sub_r2.numer == 13 && rat_sub_r2.denom == -28);
#+END_SRC
*** Library
#+BEGIN_SRC C++ :noweb yes :tangle rational.h :main no
template <typename T, typename U>
class Rational {
    public:
        T numer;
        U denom;
        Rational(T n, U d);
        void rescale_denom(U newval);
        void simplify(void);
        Rational operator+(Rational const &obj);
        Rational operator-(Rational const &obj);
        Rational operator*(Rational const &obj);
        Rational operator/(Rational const &obj);
};

template<typename T, typename U>
Rational<T, U>::Rational(T n, U d) : numer(n), denom(d) {};

<<rational-rescale>>
<<rational-simp>>
<<rational-add>>
<<rational-sub>>
<<rational-mult>>
<<rational-div>>
#+END_SRC

#+RESULTS:

*** Tests
#+BEGIN_SRC C++ :noweb yes :tangle testrational.cpp
#include "rational.h"
#include <iostream>
#include <cassert>

int main()
{
    <<test-rational-simp>>
    <<test-rational-rescale>>
    <<test-rational-add>>
    <<test-rational-sub>>
    return 0;
}
#+END_SRC

** Points
*** Point +-
\( (x_1, y_1) \pm (x_2, y_2) = (x_1 \pm x_2, y_1 \pm y_2) \)

**** Addition
#+NAME: point-add
#+BEGIN_SRC C++
template <typename T>
Point<T> Point<T>::operator+(Point<T> const &obj)
{
    T ar[dim];
    Point<T> res(ar, dim);
    for (int i = 0; i < dim; ++i)
    {
        res.coord[i] = coord[i] + obj->coord[i];
    }
}
#+END_SRC

***** TODO Tests

**** Subtraction
#+NAME: point-sub
#+BEGIN_SRC C++
template <typename T>
Point<T> Point<T>::operator-(Point<T> const &obj)
{
    T ar[dim];
    Point<T> res(ar, dim);
    for (int i = 0; i < dim; ++i)
    {
        res.coord[i] = coord[i] - obj->coord[i];
    }
}
#+END_SRC
***** TODO Tests

*** Distance
**** Squared Distance
#+NAME: point-squared-distance
#+BEGIN_SRC C++
template <typename T>
T Point<T>::dist_sq(Point<T> const &obj)
{
    T sum = 0;
    for (int i = 0; i < dim; ++i)
    {
        T diff = coord[i] - obj->coord[i];
        sum += diff * diff;
    }
    return sum;
}
#+END_SRC
***** TODO Tests

*** Vector Operations
**** Dot Product

The dot product between \( \mathbf{x} \) and \( \mathbf{y}\):
\( \mathbf{x}^\intercal \mathbf{y} = \sum_{i=1}^n \mathbf{x}_i \mathbf{y}_i \)

#+NAME: point-dot
#+BEGIN_SRC C++
template<typename T>
T Point<T>::dot(Point<T> const &obj)
{
    T sq_sum;
    for (int i = 0; i < dim; ++i)
    {
        sq_sum += coord[i] * obj->coord[i];
    }
    return sq_sum;
}
#+END_SRC
***** TODO Tests

**** Cross Product
***** 3D cross product
The cross product between \( \mathbf{x} \) and \( \mathbf{y} \)

#+NAME: point-cross
#+BEGIN_SRC C++
template <typename T>
Point<T> Point<T>::cross_3d(Point<T> const &obj)
{
    T ar[] = {0, 0, 0};
    ar[0] = coord[1] * obj->coord[2] - coord[2] * obj->coord[1];
    ar[1] = coord[2] * obj->coord[0] - coord[0] * obj->coord[2];
    ar[2] = coord[0] * obj->coord[1] - coord[1] * obj->coord[0];

    return Point<T>(ar, 3);
}
#+END_SRC

***** 2D pseudo cross product
\( (a,b) \times (c,d) = ad - bc \)
Area of parallelogram spanned by the two vectors.

#+NAME: point-p-cross
#+BEGIN_SRC C++
template <typename T>
T Point<T>::cross_2d(Point<T> const &obj)
{
    return coord[0] * obj->coord[1] - coord[1] * obj->coord[0];
}
#+END_SRC

***** TODO Tests


*** Library
#+BEGIN_SRC C++ :noweb yes :tangle point.h :main no
template <typename T>
class Point {
    public:
    T* coord;
    int dim;
    Point(T *c, int dim) : coord(c), dim(dim) {};

        Point<T> operator+(Point<T> const &obj);
        Point<T> operator-(Point<T> const &obj);

        T dist_sq(Point<T> const &obj);
        T dot(Point<T> const &obj);
        Point<T> cross_3d(Point<T> const &obj);
        T cross_2d(Point<T> const &obj);
};

<<point-add>>
<<point-sub>>
<<point-squared-distance>>
<<point-dot>>
<<point-cross>>
<<point-p-cross>>
#+END_SRC

*** Tests
#+BEGIN_SRC C++ :noweb yes :tangle point_test.cpp :include "point.h"
<<point-add-sub-test>>

#+END_SRC

** Lines, Rays, Segments
A line is defined by:
1. 2 Points (\(a\) and \(b\)), the line will span through these points
2. If each end of the line is finite or infinite
3. If the start/end points are open or closed

*** Line Segment Intersection
Given two line segments, do they intersect? If so, where?

Edge cases:
1. Parallel lines
2. Collinear points
3. Projective case
4. Point-segment intersection

#+NAME: line-intersect
#+BEGIN_SRC C++
template <typename T>
bool intersects(Line<T> const &obj)
{
    Point<T> r = points.first - points.second;
    Point<T> s = obj->first - obj->second;
    if ()
    (points.first - obj.first)
}
#+END_SRC

*** Library
#+BEGIN_SRC C++ :noweb yes :tangle lines.h :main no :include "point.h"
using namespace std;

template <typename T>
class Line {
    private:
        pair<Point<T>, Point<T>> points;
        pair<bool, bool> infinite;
        pair<bool, bool> open; // specifies if the corresponding point is open or closed
    public:
        Line(pair<Point<T>, Point<T>> p, pair<bool,bool> inf, pair<bool, bool> o) : points(p), infinite(inf), open(o) {};
        bool intersects(Line<T> const &obj);
        pair<Point<T>, Point<T>> g_points();

};

template <typename T>
pair<Point<T>, Point<T>> g_points() {
    return points;
}
#+END_SRC

*** Tests
#+BEGIN_SRC C++ :noweb yes :tangle lines_test.cpp :include "lines.h"

#+END_SRC
